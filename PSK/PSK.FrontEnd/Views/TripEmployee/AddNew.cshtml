@using PSK.FrontEnd.Static
@model Contracts.TripEmployeeDto

@{
    ViewData["Title"] = "AddNew";
}

<h2>Add new employee to the trip</h2>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Trip.Id" />
            <div class="form-group">
                <label asp-for="EmployeeId" class="control-label">Employee name</label>
                @Html.DropDownListFor(x => x.EmployeeId, new List<SelectListItem>(
                    Model.AllEmployees.Select(x =>
                    {
                        var name = x.IsBusy ? $"{x.FullName} (busy)" : x.FullName;
                        return new SelectListItem(name, x.Id.ToString(), false, x.IsBusy);
                    })), "Select employee")
                <span asp-validation-for="EmployeeId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="AccommodationReservation.Status" class="control-label">Accommodation reservation status</label>
                @Html.DropDownListFor(x => x.AccommodationReservation.Status, ViewTexts.PurchasableStatusItems, new { @id = "accommodationReservationStatus" })
                <span asp-validation-for="AccommodationReservation.Status" class="text-danger"></span>
            </div>
            <div class="form-group" id="accommodationGroupPrice">
                <label asp-for="AccommodationReservation.Price" class="control-label">Accommodation price (€)</label>
                <input asp-for="AccommodationReservation.Price" class="form-control" id="accommodationPrice"/>
                <span asp-validation-for="AccommodationReservation.Price" class="text-danger"></span>
            </div>
            <div class="form-group" id="accommodationGroupAccommodation">
                <label asp-for="AccommodationReservation.Accommodation" class="control-label"></label>
                @Html.DropDownListFor(x => x.AccommodationId, new List<SelectListItem>(
                    Model.AvailableAccommodations.Select(x =>
                    {
                        var name = x.SpacesAvailable.HasValue ? $"{x.Name} (spaces available: {x.SpacesAvailable.Value})" : x.Name;
                        return new SelectListItem(name, x.Id.ToString(), false, x.SpacesAvailable.HasValue && x.SpacesAvailable.Value <= 0);
                    })), "Select accommodation", new { @id = "accommodationAccommodation" })
                <span asp-validation-for="AccommodationReservation.Accommodation" class="text-danger"></span>
            </div>
            <div class="form-group" id="accommodationGroupStart">
                <label asp-for="AccommodationReservation.StartDate" class="control-label">Accommodation reservation start</label>
                <input asp-for="AccommodationReservation.StartDate" class="form-control" id="accommodationStart"/>
                <span asp-validation-for="AccommodationReservation.StartDate" class="text-danger"></span>
            </div>
            <div class="form-group" id="accommodationGroupEnd">
                <label asp-for="AccommodationReservation.EndDate" class="control-label">Accommodation reservation end</label>
                <input asp-for="AccommodationReservation.EndDate" class="form-control" id="accommodationEnd"/>
                <span asp-validation-for="AccommodationReservation.EndDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PlaneTicketStatus" class="control-label">Plane ticket status</label>
                @Html.DropDownListFor(x => x.PlaneTicketStatus, ViewTexts.PurchasableStatusItems, new { @id = "planeTicketStatus" })
                <span asp-validation-for="PlaneTicketStatus" class="text-danger"></span>
            </div>
            <div class="form-group" id="planeGroupPrice">
                <label asp-for="PlaneTicketPrice" class="control-label">Plane ticket price (€)</label>
                <input asp-for="PlaneTicketPrice" class="form-control" id="planePrice"/>
                <span asp-validation-for="PlaneTicketPrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CarReservationStatus" class="control-label">Car reservation status</label>
                @Html.DropDownListFor(x => x.CarReservationStatus, ViewTexts.PurchasableStatusItems, new { @id = "carReservationStatus" })
                <span asp-validation-for="CarReservationStatus" class="text-danger"></span>
            </div>
            <div class="form-group" id="carGroupPrice">
                <label asp-for="CarReservationPrice" class="control-label">Car reservation price (€)</label>
                <input asp-for="CarReservationPrice" class="form-control" id="carPrice"/>
                <span asp-validation-for="CarReservationPrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Comment" class="control-label"></label>
                <input asp-for="Comment" class="form-control" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Files" class="control-label"></label>
                <input asp-for="Files" class="form-control" multiple/>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default" onclick="return validateForm()"/>
            </div>
        </form>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "TripEmployees", new { tripId = Model.Trip.Id })
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
<script type="text/javascript">

    function validateForm() {
        var startDate = $("#accommodationStart").val();
        var endDate = $("#accommodationEnd").val();

        var currentDate = new Date();

        if (startDate >= currentDate) {
            alert("Wrong accommodation reservation start date");
            return false;
        } else if (endDate >= currentDate) {
            alert("Wrong accommodation reservation end date");
            return false;
        } else if (endDate < startDate) {
            alert("Check start and end dates of the accommodation reservation. Start date cannot be after end date");
            return false;
        }
        return true;
    }

    $(document).ready(function () {

        $('#accommodationStart').val(null);
        $('#accommodationEnd').val(null);

        $('#accommodationGroupPrice').css('display', 'none');
        $('#accommodationGroupAccommodation').css('display', 'none');
        $('#accommodationGroupStart').css('display', 'none');
        $('#accommodationGroupEnd').css('display', 'none');

        $('#planeGroupPrice').css('display', 'none');

        $('#carGroupPrice').css('display', 'none');

    });


    document.getElementById("accommodationStart").onchange = function () {
        var input = document.getElementById("accommodationEnd");
        input.setAttribute("min", this.value);
        var startDate = document.getElementById("accommodationStart").value;
        input.value = startDate;
    }


    document.getElementById("accommodationReservationStatus").onchange = function () {

        var defaultSelection = "Not needed";
        var selection = this.options[this.selectedIndex].text;

        var price = document.getElementById("accommodationGroupPrice");
        var accommodation = document.getElementById("accommodationGroupAccommodation");
        var start = document.getElementById("accommodationGroupStart");
        var end = document.getElementById("accommodationGroupEnd");

        var priceValue = document.getElementById("accommodationPrice");
        var accommodationValue = document.getElementById("accommodationAccommodation");
        var startValue = document.getElementById("accommodationStart");
        var endValue = document.getElementById("accommodationEnd");

        if (selection === defaultSelection) {

            price.style.display = "none";
            accommodation.style.display = "none";
            start.style.display = "none";
            end.style.display = "none";

            priceValue.value = null;
            accommodationValue.value = null;
            startValue.value = null;
            endValue.value = null;


        } 

        if (selection !== defaultSelection) {
            
            price.style.display = "block";
            accommodation.style.display = "block";
            start.style.display = "block";
            end.style.display = "block";

            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0');
            var yyyy = today.getFullYear();

            today = yyyy + '-' + mm + '-' + dd;
            today = today.toString();

            startValue.value = today;
            endValue.value = today;
            endValue.setAttribute("min", today);
            startValue.setAttribute("min", today);
        } 
        
    }

    document.getElementById("planeTicketStatus").onchange = function () {

        var defaultSelection = "Not needed";
        var selection = this.options[this.selectedIndex].text;

        var price = document.getElementById("planeGroupPrice");
        var priceValue = document.getElementById("planePrice");

        if (selection === defaultSelection) {

            price.style.display = "none";
            priceValue.value = null;
        }

        if (selection !== defaultSelection) {

            price.style.display = "block";
        }
    }

    document.getElementById("carReservationStatus").onchange = function () {

        var defaultSelection = "Not needed";
        var selection = this.options[this.selectedIndex].text;

        var price = document.getElementById("carGroupPrice");
        var priceValue = document.getElementById("carPrice");

        if (selection === defaultSelection) {

            price.style.display = "none";
            priceValue.value = null;
            price.required = false;
        }

        if (selection !== defaultSelection) {

            price.style.display = "block";
            price.required = false;
        }
    }

</script>

}
