@model Contracts.TripDto

@{
    ViewData["Title"] = "AddNew";
}

<h2>Add new trip</h2>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="StartDate" class="control-label">Date from (YYYY-MM-DD)</label>
                <input asp-for="StartDate" class="form-control" type="text" id="tripStartDateInput" required />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndDate" class="control-label">Date until (YYYY-MM-DD)</label>
                <input asp-for="EndDate" class="form-control" type="text" id="tripEndDateInput" required />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Comment" class="control-label">Comment</label>
                <input asp-for="Comment" class="form-control" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StartLocationId" class="control-label">Start</label>
                @Html.DropDownListFor(m => m.StartLocationId, new List<SelectListItem>(Model.Offices.Select(o => new SelectListItem(o.Name, o.Id.ToString()))), "Select location")
            </div>
            <div class="form-group">
                <label asp-for="StartLocationId" class="control-label">Destination</label>
                @Html.DropDownListFor(m => m.EndLocationId, new List<SelectListItem>(Model.Offices.Select(o => new SelectListItem(o.Name, o.Id.ToString()))), "Select location")
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Trips">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        function validateForm() {
            var startDateString = $("#tripStartDateInput").val();
            var endDateString = $("#tripEndDateInput").val();
            if (!isValidDate(startDateString)) {
                alert("Wrong trip start date");
                return false;
            } else if (!isValidDate(endDateString)) {
                alert("Wrong trip end date");
                return false;
            }else
                return true;
        }

        function isValidDate(dateString) {
            var parts;
            var year;
            var month;
            var day;
            if (/^\d{4}\/\d{1,2}\/\d{1,2}$/.test(dateString)) {
                parts = dateString.split("/");
                year = parseInt(parts[0], 10);
                month = parseInt(parts[1], 10);
                day = parseInt(parts[2], 10);
            } else if (/^\d{4}\.\d{1,2}\.\d{1,2}$/.test(dateString)) {
                parts = dateString.split(".");
                year = parseInt(parts[0], 10);
                month = parseInt(parts[1], 10);
                day = parseInt(parts[2], 10);
            } else if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(dateString)) {
                parts = dateString.split("-");
                year = parseInt(parts[0], 10);
                month = parseInt(parts[1], 10);
                day = parseInt(parts[2], 10);
            } else if (/^\d{4}\ \d{1,2}\ \d{1,2}$/.test(dateString)) {
                parts = dateString.split(" ");
                year = parseInt(parts[0], 10);
                month = parseInt(parts[1], 10);
                day = parseInt(parts[2], 10);
            } else {
                return false;
            }

            var sb = [year, month, day].join("/");

            var date = new Date(sb);
            var y = date.getFullYear();
            var m = date.getMonth() + 1;
            var d = date.getDate();

            var currentDate = new Date();

            if (y === year && m === month && d === day && date < currentDate) {
                return true;
            } else {
                return false;
            }
        }
    </script>
}
